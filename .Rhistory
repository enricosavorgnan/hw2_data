##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie)
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=FALSE)
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=FALSE)
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=FALSE)
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=FALSE, breaks = 20)
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=FALSE)
##A6. Calcola la distribuzione di frequenza per la variabile Calorie
## considerando le seguenti classi:  [80,120] (120,140] (140,160] (160,200] ----
calCLASS = cut(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200), include.lowest = T, include.highest=T)
hist(calCLASS)
boxplot(hotdog$Calorie)
abline(h=max(hotdog$Calorie))
abline(h=min(hotdog$Calorie))
hotdog[55] = c(1, Beef, 986, 495)
hotdog[55] = c(1, "Beef", 986, 495)
rbind(hotdog, hotdogNewLine)
hotdogNewLine = c(1, "Beef", 986, 495)
rbind(hotdog, hotdogNewLine)
boxplot(hotdog$Calorie)
boxplot(hotdog$Calorie)
boxplot(hotdog$Calorie, ylim=c(0, 1000))
hotdog = rbind(hotdog, hotdogNewLine)
boxplot(hotdog$Calorie, ylim=c(0, 1000))
boxplot(hotdog$Calorie)
View(hotdog)
hotdog = hotdog[-55]
hotdog = hotdog[-55]
hotdog = hotdog[-55, ]
hotdogNewLine = c(55, "Beef", 986, 495)
hotdog = rbind(hotdog, hotdogNewLine)
View(hotdog)
boxplot(hotdog$Calorie)
unique(hotdog$Calorie)
str(hotdog$C)
str(hotdog$Calorie)
sapply(hotdog$Calorie, function(x) as.numeric(x))
str(hotdog$Calorie)
hotdog$Calorie = sapply(hotdog$Calorie, function(x) as.numeric(x))
str(hotdog$Calorie)
boxplot(hotdog$Calorie)
abline(h=max(hotdog$Calorie))
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=FALSE)
hotdog = hotdog[-55]
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=FALSE)
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=FALSE)
hotdog = hotdog[-55, ]
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=FALSE)
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=T)
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=F)
curve(dnorm(x, m=mean(hotdog$Calorie), sd=var(hotdog$Calorie)), add=T)
curve(dnorm(x, m=mean(hotdog$Calorie), sd=var(hotdog$Calorie))*100, add=T)
curve(dnorm(x, m=mean(hotdog$Calorie), sd=var(hotdog$Calorie))*100, add=T)
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=F)
curve(dnorm(x, m=mean(hotdog$Calorie), sd=var(hotdog$Calorie))*100, add=T)
curve(dnorm(x, m=mean(hotdog$Calorie), sd=var(hotdog$Calorie))*10, add=T)
##A5. Rappresenta graficamente la ditribuzione di frequenza per la variabile
## calorie in classi. ----------------------------------------------------------
hist(hotdog$Calorie, freq=F)
curve(dnorm(x, m=mean(hotdog$Calorie), sd=var(hotdog$Calorie)), add=T)
##A6. Calcola la distribuzione di frequenza per la variabile Calorie
## considerando le seguenti classi:  [80,120] (120,140] (140,160] (160,200] ----
hist(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200), include.lowest = T, include.highest=T)
##A6. Calcola la distribuzione di frequenza per la variabile Calorie
## considerando le seguenti classi:  [80,120] (120,140] (140,160] (160,200] ----
hist(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200))
##A6. Calcola la distribuzione di frequenza per la variabile Calorie
## considerando le seguenti classi:  [80,120] (120,140] (140,160] (160,200] ----
hist(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200), freq=T)
##A6. Calcola la distribuzione di frequenza per la variabile Calorie
## considerando le seguenti classi:  [80,120] (120,140] (140,160] (160,200] ----
catCLASS = cut(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200), include.lowest=T, include.highest=T)
tabellaCal = table(catCLASS)
tabellaCal
hist(catCLASS)
##A7. Disegna un nuovo istogramma considerando le classi precedenti. -----------
par(mfrow=c(1, 2))
hist(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200), freq=T)
hist(catCLASS)
hist(tabellaCal)
hist(hotdog$Calorie, breaks=catCLASS, freq=T)
##A7. Disegna un nuovo istogramma considerando le classi precedenti. -----------
par(mfrow=c(1, 1))
hist(hotdog$Calorie, breaks=catCLASS, freq=T)
##A8. Calcola le densità plottate nel punto precedente. ------------------------
tabellaCal = prop.table(tabellaCal)
tabellaCal
##A9. Disegna e confronta gli istogrammi della variabile Calorie secondo le
## modalità della variabile Tipo e commenta. -----------------------------------
par(mfrow=c(1, 3))
for i in levels(hotdog$Type) {
for (i in levels(hotdog$Type)) {
hist(hotdog$Calorie[hotdog$Type == i])
}
hist(hotdog$Calorie[hotdog$Type == i], main=i)
for (i in levels(hotdog$Type)) {
hist(hotdog$Calorie[hotdog$Type == i], main=i)
}
for (i in levels(hotdog$Type)) {
hist(hotdog$Calorie[hotdog$Type == i], main=i)
}
##A9. Disegna e confronta gli istogrammi della variabile Calorie secondo le
## modalità della variabile Tipo e commenta. -----------------------------------
par(mfrow=c(1, 3))
for (i in levels(hotdog$Type)) {
hist(hotdog$Calorie[hotdog$Type == i], main=i)
}
for (i in levels(hotdog$Type)) {
hist(hotdog$Calorie[hotdog$i], main=i)
}
##A9. Disegna e confronta gli istogrammi della variabile Calorie secondo le
## modalità della variabile Tipo e commenta. -----------------------------------
par(mfrow=c(1, 3))
for (i in levels(hotdog$Type)) {
hist(hotdog$Calorie[hotdog$i], main=i)
}
hist(hotdog$Calorie[hotdog$Type == i], main=i, xlab=i)
##A9. Disegna e confronta gli istogrammi della variabile Calorie secondo le
## modalità della variabile Tipo e commenta. -----------------------------------
par(mfrow=c(1, 3))
for (i in levels(hotdog$Type)) {
hist(hotdog$Calorie[hotdog$Type == i], main=i, xlab=i)
}
par(mfrow=c(1, 1))
plot(ecdf(hotdog$Calorie))
plot(ecdf(hotdog$Calorie[hotdog$Type == 1]))
plot(ecdf(hotdog$Calorie[hotdog$Type == "Beef"]))
cols = c('red', 'blue', 'darkgreen')
par(mfrow=c(1, 1))
for(i in levels(hotdog$Type)) {
plot(ecdf(hotdog$Calorie[hotdog$Type == i], col=cols[i]))
}
?plot
?plot
curve(ecdf(hotdog$Calorie[hotdog$Type == i], col=cols[i]))
plot(ecdf(hotdog$Calorie[hotdog$Type == i], col=cols[i]))
plot(ecdf(hotdog$Calorie[hotdog$Type == i]))
for(i in levels(hotdog$Type)) {
plot(ecdf(hotdog$Calorie[hotdog$Type == i]))
}
plot(ecdf(hotdog$Calorie[hotdog$Type == i]), col='red')
for(i in levels(hotdog$Type)) {
plot(ecdf(hotdog$Calorie[hotdog$Type == i]), col='red')
}
plot(ecdf(hotdog$Calorie[hotdog$Type == i]), col=cols, add=T)
par(mfrow=c(1, 3))
for(i in levels(hotdog$Type)) {
plot(ecdf(hotdog$Calorie[hotdog$Type == i]), col=cols, add=T)
}
par(mfrow=c(1, 3))
for(i in levels(hotdog$Type)) {
plot(ecdf(hotdog$Calorie[hotdog$Type == i]), col=cols, add=T)
}
plot()
plot(x)
##A10. Calorie medie di ogni tipo
tapply(hotdog$Calorie, hotdog$Type, mean)
for (i in levels(hotdog$Type)) {
boxplot(hotdog$Calorie[hotdog$Type == i], main=i, xlab=i)
}
boxplot(hotdog$Calorie[hotdog$Type == i], main=i, xlab=i, add=T)
for (i in levels(hotdog$Type)) {
boxplot(hotdog$Calorie[hotdog$Type == i], main=i, xlab=i, add=T)
}
##A10. Calorie medie di ogni tipo
tapply(hotdog$Calorie, hotdog$Type, mean)
for (i in levels(hotdog$Type)) {
boxplot(hotdog$Calorie[hotdog$Type == i], main=i, xlab=i, add=T)
}
hist(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200), freq=T)
hist(hotdog$Calorie, breaks=15, freq=T)
curve(dnorm(x, mean(hotdog$Calorie), var(hotdog$Calorie)), add=T, col='blue')
hist(hotdog$Calorie, breaks=15, freq=F)
curve(dnorm(x, mean(hotdog$Calorie), var(hotdog$Calorie)), add=T, col='blue')
curve(dnorm(x, mean(hotdog$Calorie), var(hotdog$Calorie)), add=T, col='blue')
mean(hotdog$Calorie)
var(hotdog$Calorie)
curve(dnorm(x, mean(hotdog$Calorie), sd(hotdog$Calorie)), add=T, col='blue')
##A11
tabellaSodioCal = table(hotdog$Calorie, hotdog$Sodium)
##A11
tabellaSodioCal = table(hotdog$Calorie, hotdog$Type)
tabellaSodioCal
##A11
tabellaSodioCal = table(catCLASS, hotdog$Type)
tabellaSodioCal
prop.table(tabellaSodioCal)
round(prop.table(tabellaSodioCal), 2)
round(prop.table(tabellaSodioCal, 1), 2)
round(prop.table(tabellaSodioCal, 2), 2)
margin.table(tabellaSodioCal)
margin.table(tabellaSodioCal, 1)
margin.table(tabellaSodioCal, 2)
margin.table(prop.table(tabellaSodioCal, 2), 2)
hotdogNewLine = c(55, "Beef", NA, 495)
hotdogNewLine = c(55, "Beef", NA, 495)
hotdog = rbind(hotdog, hotdogNewLine)
##A6. Calcola la distribuzione di frequenza per la variabile Calorie
## considerando le seguenti classi:  [80,120] (120,140] (140,160] (160,200] ----
catCLASS = cut(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200), include.lowest=T, include.highest=T)
##A6. Calcola la distribuzione di frequenza per la variabile Calorie
## considerando le seguenti classi:  [80,120] (120,140] (140,160] (160,200] ----
catCLASS = cut(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200), include.lowest=T, include.highest=T)
##A6. Calcola la distribuzione di frequenza per la variabile Calorie
## considerando le seguenti classi:  [80,120] (120,140] (140,160] (160,200] ----
catCLASS = cut(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200), rm.na=T, include.lowest=T, include.highest=T)
hotdog$Calorie = sapply(hotdog$Calorie, function(x) as.numeric(x))
catCLASS = cut(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200), rm.na=T, include.lowest=T, include.highest=T)
tabellaCal = table(catCLASS)
tabellaCal
catCLASS = cut(hotdog$Calorie, breaks=c(80, 120, 140, 160, 200), include.lowest=T, include.highest=T)
tabellaCal = table(catCLASS)
tabellaCal
prop.table(tabellaCal)
rm(list=ls())
#' 1. [2] Caricare i dati nello spazio di lavoro in un data frame dal nome "macchine"
#' e gestire i valori mancanti. Si noti che i valori mancanti sono codificati
#' nel file con il carattere "?". ---------------
macchine <- read.table("datasets/macchine/macchine.DATA", sep=",", na.strings="?")
View(macchine)
#' 1. [2] Caricare i dati nello spazio di lavoro in un data frame dal nome "macchine"
#' e gestire i valori mancanti. Si noti che i valori mancanti sono codificati
#' nel file con il carattere "?". ---------------
macchine <- read.table("datasets/macchine/macchine.DATA", sep=",", na.strings="?",  stringsAsFactors = T)
na_counts <- sum(is.na(macchine))
na_rows <- sum(apply(macchine, 1, function(x) any(is.na(x))))
#' 2. [1] Descrivere il tipo di oggetto importato e le sue dimensioni. ---------------
str(macchine)
dim(macchine)
#' 3. [2] Quali variabili presentano più di 2 valori mancanti? ---------------
mask_na = apply(macchine, 2, function(x) sum(is.na(x)) > 2)
more2na = names(macchine[mask_na])
more2na
more2na = colnames(macchine[mask_na])
more2na
mask_2 = sapply(macchine, function(x) sum(is.na(x))>2)
more = names(macchine[mask_2])
more
dim(macchine)
?sapply
x = matrix(c(3, 2, 4, 5, 3, 5, 6, 7, 2, 4, 3, 7), nrow=3, ncol=4)
View(x)
x = matrix(c(3, 2, 4, 5, 3, 5, 6, 7, 2, 4, 3, 7), nrow=3, ncol=4, byrow=T)
View(x)
mask = sapply(x, function(z) z>3)
mask
str(mask)
x = matrix(c(3, 2, 4, 5, 3, 5, 6, 7, 2, 4, 3, 7), nrow=3, ncol=4, byrow=T)
mask = mapply(x, function(z) z>3)
mask = apply(x, 2, function(z) z>3)
mask
mask = sapply(x, function(z) z>3)
mask
as.matrix(mask)
mask
mask = sapply(x, function(z) sum(z>3)
mask = sapply(x, function(z) sum(z>3))
mask
mask = sapply(x, function(z) sum(z>3))
mask
mask = apply(x, 2, function(z) sum(z>3))
mask
mask_2 = sapply(macchine, function(x) sum(is.na(x))>2)
mask_2
mask = sapply(x, function(z) sum(z)>3))
mask = sapply(x, function(z) sum(z)>3)
mask
#' 10. [3] Rappresentare graficamente la distribuzione delle frequenze relative della
#' variabile V16 ed aggiungere al grafico il nome della variabile "Cilindri". ---------------
barplot(tableCyl, main="Cilindri", ylim=c(0, 1))
#' 8. [2] Calcolare la distribuzione delle frequenze percentuali del numero di cilindri (V16)
#' approssimando i risultati ad una cifra decimale. ---------------
tableCyl = round(prop.table(table(macchine$V16)), 2)
#' 9. [3] Ottenere le due cilindrate maggiormente presenti nel dataset. ---------------
tableCylOrd = sort(tableCyl, decreasing=T)
#' 10. [3] Rappresentare graficamente la distribuzione delle frequenze relative della
#' variabile V16 ed aggiungere al grafico il nome della variabile "Cilindri". ---------------
barplot(tableCyl, main="Cilindri", ylim=c(0, 1))
#' 11. [2] Creare un nuovo dataset chiamato "macchineCil" che contiene i dati relativi
#' alle sole macchine con il numero di cilindri trovati al punto 9. ---------------
macchineCil = macchine[macchine$V16 == names(tableCylOrd[1:2])[1] | macchine$V16 == names(tableCylOrd[1:2])[2]. ]
#' 11. [2] Creare un nuovo dataset chiamato "macchineCil" che contiene i dati relativi
#' alle sole macchine con il numero di cilindri trovati al punto 9. ---------------
macchineCil = macchine[macchine$V16 == names(tableCylOrd[1:2])[1] | macchine$V16 == names(tableCylOrd[1:2])[2], ]
#' 12. [3] Utilizzando il dataset "macchineCil", calcolare i prezzi medi (V26) rispetto al numero di cilindri (V16). ---------------
macchineCil$V16 = factor(macchineCil$V16, levels=c("four", "six"))
tapply(macchineCil$V26, macchineCil$V16, mean, na.rm=T)
#' 13. [3] Utilizzando il dataset "macchineCil", a partire dalla variabile prezzo (V26), aggiungere una nuova variabile
#' al dataframe chiamata "prezzoCat" considerando le seguenti categorie:
#' "fino a 10000", "(10000, 15000]", "(15000, 20000]", "(20000, 30000]", "30000 e più". ---------------
macchineCil$prezzoCat = cut(macchineCil$V26, breaks=c(0, 10000, 15000, 20000, 30000, Inf))
table(prezzoCat)
#' 13. [3] Utilizzando il dataset "macchineCil", a partire dalla variabile prezzo (V26), aggiungere una nuova variabile
#' al dataframe chiamata "prezzoCat" considerando le seguenti categorie:
#' "fino a 10000", "(10000, 15000]", "(15000, 20000]", "(20000, 30000]", "30000 e più". ---------------
macchineCil$prezzoCat = cut(macchineCil$V26, breaks=c(0, 10000, 15000, 20000, 30000, Inf))
table(prezzoCat)
#' 13. [3] Utilizzando il dataset "macchineCil", a partire dalla variabile prezzo (V26), aggiungere una nuova variabile
#' al dataframe chiamata "prezzoCat" considerando le seguenti categorie:
#' "fino a 10000", "(10000, 15000]", "(15000, 20000]", "(20000, 30000]", "30000 e più". ---------------
macchineCil$prezzoCat = cut(macchineCil$V26, breaks=c(0, 10000, 15000, 20000, 30000, Inf))
table(prezzoCat)
macchineCil$prezzoCat = cut(macchineCil$V26, breaks=c(0, 10000, 15000, 20000, 30000, Inf))
macchineCil$prezzoCat = cut(macchineCil$V26, breaks=c(0, 10000, 15000, 20000, 30000, Inf))
table(prezzoCat)
#' 13. [3] Utilizzando il dataset "macchineCil", a partire dalla variabile prezzo (V26), aggiungere una nuova variabile
#' al dataframe chiamata "prezzoCat" considerando le seguenti categorie:
#' "fino a 10000", "(10000, 15000]", "(15000, 20000]", "(20000, 30000]", "30000 e più". ---------------
macchineCil$prezzoCat = cut(macchineCil$V26, breaks=c(0, 10000, 15000, 20000, 30000, Inf))
table(prezzoCat)
table(prezzoCat)
table(macchine$prezzoCat)
#' 13. [3] Utilizzando il dataset "macchineCil", a partire dalla variabile prezzo (V26), aggiungere una nuova variabile
#' al dataframe chiamata "prezzoCat" considerando le seguenti categorie:
#' "fino a 10000", "(10000, 15000]", "(15000, 20000]", "(20000, 30000]", "30000 e più". ---------------
macchineCil$prezzoCat = cut(macchineCil$V26, breaks=c(0, 10000, 15000, 20000, 30000, Inf))
table(macchine$prezzoCat)
#' 14. [4] Utilizzando il dataset "macchineCil", rappresentare graficamente la variabile prezzoCat e aggiungere al grafico la media della
#' variabile prezzo (V26). ---------------
plot(macchineCil$prezzoCat, macchineCil$V26, xlab="Prezzo", ylab="PrezzoCat")
points(levels(macchineCil$prezzoCat), tapply(macchineCil$V26, macchineCil$prezzoCat, mean), col="red", pch=19)
#' 15. [4] Utilizzando il dataset "macchineCil", stampare in un unico oggetto le distribuzioni condizionate di prezzoCat
#' rispetto  ai cilindri e la distribuzione marginale di prezzoCat. Commentare. ---------------
tableCylPrezzo = table(macchineCil$V16, macchineCil$prezzoCat)
tablePrezzo = margin.table(tableCylPrezzo, 2)
rbind(tableCylPrezzo, "Marginal Price Distribution"=tablePrezzo)
#' 16. [6] Scrivere una funzione che prenda in input la numerosità del campione (n),
#' la media (mu) e la deviazione standard (s) e:
#' - simuli un campione casuale di dimensione n da una normale con media mu e
#'   deviazione standard s;
#' - restituisca l'istogramma del campione simulato sovrapponendo la densità
#'   della distribuzione teorica. ---------------
#'
setNormalized = function(n=1000, mu=0, s=1) {
myset = rnorm(n, mu, s)
hist(myset, freq=F)
curve(dnorm(x, mu, s), add=T, col=2, lwd=2.5)
return(myset)
}
randomSet = setNormalized()
#' 14. [4] Utilizzando il dataset "macchineCil", rappresentare graficamente la variabile prezzoCat e aggiungere al grafico la media della
#' variabile prezzo (V26). ---------------
plot(macchineCil$prezzoCat, macchineCil$V26, xlab="Prezzo", ylab="PrezzoCat")
points(levels(macchineCil$prezzoCat), tapply(macchineCil$V26, macchineCil$prezzoCat, mean), col="red", pch=19)
#' 13. [3] Utilizzando il dataset "macchineCil", a partire dalla variabile prezzo (V26), aggiungere una nuova variabile
#' al dataframe chiamata "prezzoCat" considerando le seguenti categorie:
#' "fino a 10000", "(10000, 15000]", "(15000, 20000]", "(20000, 30000]", "30000 e più". ---------------
macchineCil$prezzoCat = cut(macchineCil$V26, breaks=c(0, 10000, 15000, 20000, 30000, Inf))
table(macchine$prezzoCat)
#' 14. [4] Utilizzando il dataset "macchineCil", rappresentare graficamente la variabile prezzoCat e aggiungere al grafico la media della
#' variabile prezzo (V26). ---------------
plot(macchineCil$prezzoCat, macchineCil$V26, xlab="Prezzo", ylab="PrezzoCat")
points(levels(macchineCil$prezzoCat), tapply(macchineCil$V26, macchineCil$prezzoCat, mean), col="red", pch=19)
#' 15. [4] Utilizzando il dataset "macchineCil", stampare in un unico oggetto le distribuzioni condizionate di prezzoCat
#' rispetto  ai cilindri e la distribuzione marginale di prezzoCat. Commentare. ---------------
tableCylPrezzo = table(macchineCil$V16, macchineCil$prezzoCat)
tablePrezzo = margin.table(tableCylPrezzo, 2)
rbind(tableCylPrezzo, "Marginal Price Distribution"=tablePrezzo)
#' 16. [6] Scrivere una funzione che prenda in input la numerosità del campione (n),
#' la media (mu) e la deviazione standard (s) e:
#' - simuli un campione casuale di dimensione n da una normale con media mu e
#'   deviazione standard s;
#' - restituisca l'istogramma del campione simulato sovrapponendo la densità
#'   della distribuzione teorica. ---------------
#'
setNormalized = function(n=1000, mu=0, s=1) {
myset = rnorm(n, mu, s)
hist(myset, freq=F)
curve(dnorm(x, mu, s), add=T, col=2, lwd=2.5)
return(myset)
}
randomSet = setNormalized()
macchineCil$prezzoCat = cut(macchineCil$V26, breaks=c(0, 10000, 15000, 20000, 30000, Inf))
table(macchine$prezzoCat)
macchine$prezzoCat
View(macchineCil)
table(macchineCil$prezzoCat)
#' 14. [4] Utilizzando il dataset "macchineCil", rappresentare graficamente la variabile prezzoCat e aggiungere al grafico la media della
#' variabile prezzo (V26). ---------------
plot(macchineCil$prezzoCat, macchineCil$V26, xlab="Prezzo", ylab="PrezzoCat")
#' 14. [4] Utilizzando il dataset "macchineCil", rappresentare graficamente la variabile prezzoCat e aggiungere al grafico la media della
#' variabile prezzo (V26). ---------------
hist(macchineCil$prezzoCat, macchineCil$V26, xlab="Prezzo", ylab="PrezzoCat")
#' 14. [4] Utilizzando il dataset "macchineCil", rappresentare graficamente la variabile prezzoCat e aggiungere al grafico la media della
#' variabile prezzo (V26). ---------------
plot(macchineCil$prezzoCat, macchineCil$V26, xlab="Prezzo", ylab="PrezzoCat")
#' 15. [4] Utilizzando il dataset "macchineCil", stampare in un unico oggetto le distribuzioni condizionate di prezzoCat
#' rispetto  ai cilindri e la distribuzione marginale di prezzoCat. Commentare. ---------------
tableCylPrezzo = table(macchineCil$V16, macchineCil$prezzoCat)
#' 15. [4] Utilizzando il dataset "macchineCil", stampare in un unico oggetto le distribuzioni condizionate di prezzoCat
#' rispetto  ai cilindri e la distribuzione marginale di prezzoCat. Commentare. ---------------
tableCylPrezzo = table(macchineCil$V16, macchineCil$prezzoCat)
tablePrezzo = margin.table(tableCylPrezzo, 2)
rbind(tableCylPrezzo, "Marginal Price Distribution"=tablePrezzo)
rbind(tableCylPrezzo, "Marginal Price Distribution"=tablePrezzo)
#' 16. [6] Scrivere una funzione che prenda in input la numerosità del campione (n),
#' la media (mu) e la deviazione standard (s) e:
#' - simuli un campione casuale di dimensione n da una normale con media mu e
#'   deviazione standard s;
#' - restituisca l'istogramma del campione simulato sovrapponendo la densità
#'   della distribuzione teorica. ---------------
#'
setNormalized = function(n=1000, mu=0, s=1) {
myset = rnorm(n, mu, s)
hist(myset, freq=F)
curve(dnorm(x, mu, s), add=T, col=2, lwd=2.5)
return(myset)
}
randomSet = setNormalized()
hist(myset, freq=F, breaks = 20)
#' 16. [6] Scrivere una funzione che prenda in input la numerosità del campione (n),
#' la media (mu) e la deviazione standard (s) e:
#' - simuli un campione casuale di dimensione n da una normale con media mu e
#'   deviazione standard s;
#' - restituisca l'istogramma del campione simulato sovrapponendo la densità
#'   della distribuzione teorica. ---------------
#'
setNormalized = function(n=1000, mu=0, s=1) {
myset = rnorm(n, mu, s)
hist(myset, freq=F, breaks = 20)
curve(dnorm(x, mu, s), add=T, col=2, lwd=2.5)
return(myset)
}
randomSet = setNormalized()
rm(list=ls())
?na.omit
?na.exclude
library(dplyr)
library(ggplot2)
library(moments)
setwd("D:/university/data_analysis/hw2_data")
# Carico il dataset
houses = read.csv("house_price.csv", stringsAsFactors = TRUE)
dim(houses)
quant_cont_cols = c("LotFrontage", "LotArea", "MasVnrArea", "BsmtFinSF1", "BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF", "X1stFlrSF", "X2ndFlrSF", "LowQualFinSF", "GrLivArea", "GarageArea", "WoodDeckSF", "OpenPorchSF", "EnclosedPorch", "X3SsnPorch", "ScreenPorch")
qual_cols = c("MSSubClass", "MSZoning", "Street", "LotShape", "LandContour", "Utilities", "LotConfig", "LandSlope", "Neighborhood", "Condition1", "Condition2", "BldgType", "HouseStyle", "RoofStyle", "RoofMatl", "Exterior1st", "Exterior2nd", "MasVnrType", "ExterQual", "ExterCond", "Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2", "Heating", "HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional", "FireplaceQu", "GarageType", "GarageFinish", "GarageQual", "GarageCond", "PavedDrive", "SaleType", "SaleCondition")
quant_disc_cols = c("BsmtFullBath", "BsmtHalfBath", "FullBath", "HalfBath", "BedroomAbvGr", "KitchenAbvGr", "TotRmsAbvGrd", "Fireplaces", "GarageCars")
year_cols = c("YearBuilt", "YearRemodAdd", "GarageYrBlt")
mark_cols = c("OverallQual", "OverallCond")
houses[, qual_cols[1]] = as.factor(houses[, qual_cols[1]])
quant_cont_vars = houses[, quant_cont_cols]
qual_vars = houses[, qual_cols]
quant_discr_vars = houses[, quant_disc_cols]
year_vars = houses[, year_cols]
mark_vars = houses[, mark_cols]
# Funzione helper per printare tutti i dati che mi servono
cont_info = function (x, i) {
if (colnames(variabili_quant_cont[i]) != "LotFrontage" & colnames(houses[i]) != "LotArea") {
x = x[x != 0]
}
print(colnames(variabili_quant_cont[i]))
print(summary(x))
print(skewness(x, na.rm = TRUE))
print(kurtosis(x), na.rm = TRUE)
par(mfrow = (c(1, 3)))
boxplot(x, main = "Boxplot", xlab = "Value", horizontal = TRUE)
plot(density(x, na.rm = T), main="Frequency", xlab = "Frequency", ylab = "Frequency")
qqnorm(x, main = "QQ Plot")
qqline(x)
mtext(text=colnames(variabili_quant_cont[i]), line = -1, outer = T, cex = 1.5)
}
# Applico la funzione a tutte le variabili numeriche continue
for (i in seq_along(variabili_quant_cont)) {
cont_info(variabili_quant_cont[, i], i)
}
## Variabili QUALITATIVE
par(mfrow = c(1, 1))
biv_cat = function(a, i){
print(colnames(qual_vars)[i])
boxplot(log(houses$SalePrice) ~ a, main = c("Prezzo e ", colnames(qual_vars)[i]), xlab= colnames(qual_vars)[i], ylab="Prezzo")
plot(ecdf(houses$SalePrice[a == levels(a)[1]]), xlab=colnames(qual_vars)[i], ylab="Prezzo", verticals=T, main="funzione empirica")
for (j in 2: nlevels(a)){
if (sum(houses$SalePrice[a == levels(a)[j]], na.rm=T)>0)
plot(ecdf(houses$SalePrice[a == levels(a)[j]]), verticals=T, add=T, col= j)
}
legend("topright", inset=c(0,0.1),legend = c(levels(a)), col = c(1:nlevels(a)), lty = 1, cex=0.35)
p3 <- ggplot(houses, aes(x = a, y = SalePrice)) +
geom_violin() +
labs(title = paste("Prezzo e ", colnames(qual_vars)[i]), x = colnames(qual_vars)[i], y = "Prezzo")
print(p3)
testanova<- aov(SalePrice ~ a, data=houses)
print(summary(testanova))
}
for (i in 1:length(qual_vars)){
biv_cat(houses[,colnames(qual_vars)[i]],i)
}
View(qual_vars)
